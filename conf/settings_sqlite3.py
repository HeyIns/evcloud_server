#coding=utf-8
"""
Django settings for vmmanager project.

Generated by 'django-admin startproject' using Django 1.8.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os, sys

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '5o5^f^_-a7%$w#$)-1g9-(t-$nkog_ro@-ymq)jg^41#foo@y3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'oauth2_provider',
    # 'corsheaders',
    'rest_framework',

    'conf',
    'compute',
    'image',
    'network',
    'storage',
    'api',
    'novnc',
    'vmadmin',
    'utils',
    'reports',
    'vmuser',
    'volume',
    'device',
)

MIDDLEWARE = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    # 'corsheaders.middleware.CorsMiddleware',
 #   'django.middleware.transaction.TransactionMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
)


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    )
}
# AUTHENTICATION_BACKENDS = (
#     'oauth2_provider.backends.OAuth2Backend',
#     'django.contrib.auth.backends.ModelBackend',
# )

ROOT_URLCONF = 'urls'

CORS_ORIGIN_ALLOW_ALL = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR + '/templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'conf.wsgi.application'


# Database

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'ev_db.sqlite3',
    }
}


# Internationalization

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'PRC'

USE_I18N = True

USE_L10N = True

USE_TZ = False

STATIC_URL = '/static/'
STATIC_LIB_URL = '/static/lib/'

CKEDITOR_JQUERY_URL = STATIC_LIB_URL + 'jquery/jquery.2.1.1.min.js'

AUTH_USER_MODEL = 'account.User'

#当DEBUG==False或执行collectstatic时，需要STATIC_ROOT
#当DEBUG=True时，将STATIC_ROOT注掉
#STATIC_ROOT = './static/' 

#执行collectstatic时，把STATICFILES_DIRS中与STATIC_ROOT相同的路径注掉；
#因为collectstatic时，django会查找STATICFILES_DIRS中所有路径下的静态文件集合到STATIC_ROOT目录下，从而导致死循环；
STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
    ]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR + '/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'django.template.context_processors.static',
            ],
        },
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'api': {
            'format': '%(asctime)s  %(user_id)s  %(user_name)s  %(op)s  %(start_time)s  %(finish_time)s  %(result)s  %(error)s  %(from_trd_part)s  %(req_args)s  %(message)s'
        }
    },
    'handlers': {
        'api_handler': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/var/log/nginx/evcloud_api.log',
            'formatter': 'api',
            'maxBytes':  1024 * 1024 * 512
        }
    },
    'loggers': {
        'api': {
            'handlers': ['api_handler'],
            'level': 'INFO',
            'propagate': False  # 是否继承父类的log信息
        }
    }
}


NOVNC_PORT = 8080
NOVNC_TOKEN_FILE_PATH = '../../novnc/novnc_token/vnc_tokens'
VNCSERVER_BASE_PORT = 5900

HOST_FILTER_STRATEGY = 'compute.host.ram_filter'

AUTH_USER_MODEL = 'auth.User'
